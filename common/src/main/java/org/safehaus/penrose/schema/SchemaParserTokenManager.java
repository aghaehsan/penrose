/* Generated By:JavaCC: Do not edit this line. SchemaParserTokenManager.java */
/**
 * Copyright 2009 Red Hat, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package org.safehaus.penrose.schema;

public class SchemaParserTokenManager implements SchemaParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000L) != 0L)
            return 55;
         if ((active0 & 0xfbe7ff8000L) != 0L)
         {
            jjmatchedKind = 41;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0xfbe7ff8000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 0xf9e7fb8000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
            return 7;
         }
         if ((active0 & 0x200040000L) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 0xf8e7fa0000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active0 & 0x100018000L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0xf8e3fa0000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0xf8e39a0000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x600000L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 0xf8e39a0000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
            return 7;
         }
         return -1;
      case 7:
         if ((active0 & 0xf8c3800000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 7;
            return 7;
         }
         if ((active0 & 0x201a0000L) != 0L)
            return 7;
         return -1;
      case 8:
         if ((active0 & 0xf843800000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 8;
            return 7;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 7;
         return -1;
      case 9:
         if ((active0 & 0xf802800000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 9;
            return 7;
         }
         if ((active0 & 0x41000000L) != 0L)
            return 7;
         return -1;
      case 10:
         if ((active0 & 0xf802800000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 10;
            return 7;
         }
         return -1;
      case 11:
         if ((active0 & 0x3802000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 11;
            return 7;
         }
         if ((active0 & 0xc000800000L) != 0L)
            return 7;
         return -1;
      case 12:
         if ((active0 & 0x3802000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 12;
            return 7;
         }
         return -1;
      case 13:
         if ((active0 & 0x3802000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 13;
            return 7;
         }
         return -1;
      case 14:
         if ((active0 & 0x3802000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 14;
            return 7;
         }
         return -1;
      case 15:
         if ((active0 & 0x3002000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 15;
            return 7;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 7;
         return -1;
      case 16:
         if ((active0 & 0x3002000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 16;
            return 7;
         }
         return -1;
      case 17:
         if ((active0 & 0x2002000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 17;
            return 7;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 7;
         return -1;
      case 18:
         if ((active0 & 0x2002000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 18;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 13);
      case 39:
         return jjStartNfaWithStates_0(0, 14, 55);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 46:
         return jjStopAtPos(0, 12);
      case 65:
         return jjMoveStringLiteralDfa1_0(0xa0000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x300000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x2008000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x120000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x40e40000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 91:
         return jjStopAtPos(0, 10);
      case 93:
         return jjStopAtPos(0, 11);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xf000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 123:
         return jjStopAtPos(0, 8);
      case 125:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x200008000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x20020000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x4004000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x180240000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8800000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000L);
      case 80:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 7);
         break;
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x120030000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 89:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 67:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 7);
         break;
      case 69:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x4800000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000020000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 84:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x20400000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x42000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x800400000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 69:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x808a0000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x20100000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x2820000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x80180000L);
      case 82:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 7);
         break;
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 88:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 7);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x10a0000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 69:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 7);
         break;
      case 71:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 7);
         break;
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 7);
         break;
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 89:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0xc000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x40800000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 89:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0xe000000000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 24, 7);
         break;
      case 76:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 7);
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x1002000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(11, 23, 7);
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 7);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 7);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(15, 35, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 36, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(19, 25, 7);
         break;
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 37, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(1);
                  }
                  break;
               case 55:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 39)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 2:
               case 3:
                  if (curChar != 45)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(7);
                  }
                  if (curChar == 111)
                     jjAddStates(0, 1);
                  else if (curChar == 97)
                     jjAddStates(2, 3);
                  else if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 55:
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(7);
                  break;
               case 11:
                  if (curChar == 97)
                     jjAddStates(2, 3);
                  break;
               case 12:
                  if (curChar == 101 && kind > 28)
                     kind = 28;
                  break;
               case 13:
               case 24:
                  if (curChar == 112)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 111)
                     jjAddStates(0, 1);
                  break;
               case 36:
                  if (curChar == 115 && kind > 27)
                     kind = 27;
                  break;
               case 37:
               case 46:
                  if (curChar == 115)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 106)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 55:
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   45, 54, 23, 34, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", 
"\135", "\56", "\44", "\47", "\116\101\115\105", "\104\105\123\103", 
"\117\102\123\117\114\105\124\105", "\123\125\120", "\105\121\125\101\114\111\124\131", 
"\117\122\104\105\122\111\116\107", "\123\125\102\123\124\122", "\123\131\116\124\101\130", 
"\123\111\116\107\114\105\55\126\101\114\125\105", "\103\117\114\114\105\103\124\111\126\105", 
"\116\117\55\125\123\105\122\55\115\117\104\111\106\111\103\101\124\111\117\116", "\125\123\101\107\105", null, null, "\101\102\123\124\122\101\103\124", 
"\123\124\122\125\103\124\125\122\101\114", "\101\125\130\111\114\111\101\122\131", "\115\125\123\124", "\115\101\131", 
null, "\165\163\145\162\101\160\160\154\151\143\141\164\151\157\156\163", 
"\144\151\162\145\143\164\157\162\171\117\160\145\162\141\164\151\157\156", 
"\144\151\163\164\162\151\142\165\164\145\144\117\160\145\162\141\164\151\157\156", "\144\123\101\117\160\145\162\141\164\151\157\156", 
"\144\163\141\117\160\145\162\141\164\151\157\156", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoSpecial = {
   0x20L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
protected char curChar;
public SchemaParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SchemaParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
